from pathlib import Path

import pandas as pd
import pytest
from pandas.testing import assert_frame_equal

from mbs_results.outputs.qa_output import produce_qa_output

@pytest.fixture(scope="class")
def filepath():
    return Path("tests/data/outputs/qa_output")


@pytest.fixture(scope="class")
def input_df(filepath):
    return pd.read_csv(filepath / "qa_output_input.csv", index_col=False)


@pytest.fixture(scope="class")
def output_df(filepath):
    return pd.read_csv(filepath / "qa_output_output.csv", index_col=False)

@pytest.fixture(scope="class")
def test_config():
    return {
    "auxiliary": "frotover",
    "auxiliary_converted": "converted_frotover",
    "calibration_factor": "calibration_factor",
    "cell_number": "cell_no",
    "design_weight": "design_weight",
    "status": "statusencoded",
    "form_id_idbr": "formtype",
    "sic": "frosic2007",
    "group": "calibration_group",
    "calibration_group": "calibration_group",
    "period": "period",
    "question_no": "questioncode",
    "reference": "reference",
    "region": "region",
    "sampled": "is_sampled",
    "census": "is_census",
    "strata": "cell_no",
    "target": "adjustedresponse",
    "form_id_spp": "form_type_spp",
    "l_value_question_no": "question_no"
    }

class TestProduceQaOutput:
    def test_qa_output(
        self,
        test_config,
        input_df,
        output_df,
    ):
        expected_output = output_df

        actual_output = produce_qa_output(
            config = test_config,
            post_win_df=input_df,
        )

        assert_frame_equal(actual_output, expected_output)
